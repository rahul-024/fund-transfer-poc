// Code generated by MockGen. DO NOT EDIT.
// Source: repository/account_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rahul-024/fund-transfer-poc/models"
	repository "github.com/rahul-024/fund-transfer-poc/repository"
	gorm "gorm.io/gorm"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// DecrementBalance mocks base method.
func (m *MockAccountRepository) DecrementBalance(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementBalance indicates an expected call of DecrementBalance.
func (mr *MockAccountRepositoryMockRecorder) DecrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementBalance", reflect.TypeOf((*MockAccountRepository)(nil).DecrementBalance), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockAccountRepository) DeleteAccountById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockAccountRepositoryMockRecorder) DeleteAccountById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockAccountRepository)(nil).DeleteAccountById), id)
}

// GetAccountById mocks base method.
func (m *MockAccountRepository) GetAccountById(id int) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", id)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockAccountRepositoryMockRecorder) GetAccountById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountById), id)
}

// GetAll mocks base method.
func (m *MockAccountRepository) GetAll(pageId, pageSize int) ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pageId, pageSize)
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountRepositoryMockRecorder) GetAll(pageId, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountRepository)(nil).GetAll), pageId, pageSize)
}

// IncrementBalance mocks base method.
func (m *MockAccountRepository) IncrementBalance(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBalance indicates an expected call of IncrementBalance.
func (mr *MockAccountRepositoryMockRecorder) IncrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBalance", reflect.TypeOf((*MockAccountRepository)(nil).IncrementBalance), arg0, arg1)
}

// SaveAccount mocks base method.
func (m *MockAccountRepository) SaveAccount(arg0 models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockAccountRepositoryMockRecorder) SaveAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockAccountRepository)(nil).SaveAccount), arg0)
}

// SaveEntry mocks base method.
func (m *MockAccountRepository) SaveEntry(arg0 *models.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntry indicates an expected call of SaveEntry.
func (mr *MockAccountRepositoryMockRecorder) SaveEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntry", reflect.TypeOf((*MockAccountRepository)(nil).SaveEntry), arg0)
}

// SaveTransfer mocks base method.
func (m *MockAccountRepository) SaveTransfer(arg0 *models.Transfer) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransfer", arg0)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTransfer indicates an expected call of SaveTransfer.
func (mr *MockAccountRepositoryMockRecorder) SaveTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransfer", reflect.TypeOf((*MockAccountRepository)(nil).SaveTransfer), arg0)
}

// UpdateAccountById mocks base method.
func (m *MockAccountRepository) UpdateAccountById(arg0, arg1 models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountById", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountById indicates an expected call of UpdateAccountById.
func (mr *MockAccountRepositoryMockRecorder) UpdateAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountById", reflect.TypeOf((*MockAccountRepository)(nil).UpdateAccountById), arg0, arg1)
}

// WithTrx mocks base method.
func (m *MockAccountRepository) WithTrx(arg0 *gorm.DB) repository.AccountRepositoryImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTrx", arg0)
	ret0, _ := ret[0].(repository.AccountRepositoryImpl)
	return ret0
}

// WithTrx indicates an expected call of WithTrx.
func (mr *MockAccountRepositoryMockRecorder) WithTrx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTrx", reflect.TypeOf((*MockAccountRepository)(nil).WithTrx), arg0)
}
