// Code generated by MockGen. DO NOT EDIT.
// Source: service/account_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rahul-024/fund-transfer-poc/models"
	request "github.com/rahul-024/fund-transfer-poc/models/request"
	service "github.com/rahul-024/fund-transfer-poc/service"
	gorm "gorm.io/gorm"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// DecrementBalance mocks base method.
func (m *MockAccountService) DecrementBalance(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementBalance indicates an expected call of DecrementBalance.
func (mr *MockAccountServiceMockRecorder) DecrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementBalance", reflect.TypeOf((*MockAccountService)(nil).DecrementBalance), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockAccountService) DeleteAccountById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockAccountServiceMockRecorder) DeleteAccountById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockAccountService)(nil).DeleteAccountById), id)
}

// GetAccountById mocks base method.
func (m *MockAccountService) GetAccountById(id int) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", id)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockAccountServiceMockRecorder) GetAccountById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockAccountService)(nil).GetAccountById), id)
}

// GetAll mocks base method.
func (m *MockAccountService) GetAll(pageId, pageSize int) ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pageId, pageSize)
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountServiceMockRecorder) GetAll(pageId, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountService)(nil).GetAll), pageId, pageSize)
}

// IncrementBalance mocks base method.
func (m *MockAccountService) IncrementBalance(arg0 int, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBalance indicates an expected call of IncrementBalance.
func (mr *MockAccountServiceMockRecorder) IncrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBalance", reflect.TypeOf((*MockAccountService)(nil).IncrementBalance), arg0, arg1)
}

// SaveAccount mocks base method.
func (m *MockAccountService) SaveAccount(arg0 models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockAccountServiceMockRecorder) SaveAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockAccountService)(nil).SaveAccount), arg0)
}

// SaveEntry mocks base method.
func (m *MockAccountService) SaveEntry(req *request.TransferRequest, dc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntry", req, dc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntry indicates an expected call of SaveEntry.
func (mr *MockAccountServiceMockRecorder) SaveEntry(req, dc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntry", reflect.TypeOf((*MockAccountService)(nil).SaveEntry), req, dc)
}

// SaveTransfer mocks base method.
func (m *MockAccountService) SaveTransfer(req *request.TransferRequest) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransfer", req)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTransfer indicates an expected call of SaveTransfer.
func (mr *MockAccountServiceMockRecorder) SaveTransfer(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransfer", reflect.TypeOf((*MockAccountService)(nil).SaveTransfer), req)
}

// UpdateAccountById mocks base method.
func (m *MockAccountService) UpdateAccountById(arg0, arg1 models.Account) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountById", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountById indicates an expected call of UpdateAccountById.
func (mr *MockAccountServiceMockRecorder) UpdateAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountById", reflect.TypeOf((*MockAccountService)(nil).UpdateAccountById), arg0, arg1)
}

// WithTrx mocks base method.
func (m *MockAccountService) WithTrx(arg0 *gorm.DB) service.AccountServiceImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTrx", arg0)
	ret0, _ := ret[0].(service.AccountServiceImpl)
	return ret0
}

// WithTrx indicates an expected call of WithTrx.
func (mr *MockAccountServiceMockRecorder) WithTrx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTrx", reflect.TypeOf((*MockAccountService)(nil).WithTrx), arg0)
}
